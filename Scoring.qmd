---
title: "Scoring Individual Students"
---

# RNetica and Peanut Packages

## The RNetica Packages

The RNetica suite consists of a number of packages:

![RNetica Package Suite](img/PnetPackages.png)

1.  `CPTtools` is a collection of tools for building conditional probability tables (particularly, the DiBello models). It stands alone.

2.  `RNetica` links R to the [Netica](https://norsys.com) Bayes net engine. *Note: non-trivial uses of RNetica require a Netica API (not GUI) license from [Norsys](https://norsys.com).*

## Peanut packages

The Peanut object oriented framework rests on top of `CPTtools` and `RNetica`.

![RNetica Package Suite](img/PnetPackages.png)

1.  `CPTtools` is a collection of tools for building conditional probability tables (particularly, the DiBello models). It stands alone.

2.  `RNetica` links R to the [Netica](https://norsys.com) Bayes net engine. \_Note: non-trivial uses of RNetica require a Netica API (not GUI) license from [Norsys](https://norsys.com).

## Peanut packages

The Peanut object oriented framework rests on top of `CPTtools` and `RNetica`.

![RNetica Package Suite](img/PnetPackages.png)

3.  `Peanut` (a corrupt reading of Pnet, or parameterized network) is an object oriented frame work on top of `CPTtools`.

4.  `PNetica` is an implementation of the `Peanut` framework using `RNetica`.

Packages can be installed through R-Universe

```{r InstallRNetica}
#| eval: FALSE
install.packages(c('CPTtootls','RNetica','Peanut','PNetica'),
                 repos = c('https://ralmond.r-universe.dev', 'https://cloud.r-project.org'))
```

Source code is on github <https://github.com/ralmond/>.

## License

-   R -- GPL-3 (Free and open source)
-   RNetica -- Artistic (Free and open source)
-   Netica.dll/libNetica.so-- Commercial (open API, but not open source)
    -   Free Student/Demo version
        -   Limited number of nodes
        -   Limited usage (education, evaluation of Netica)
    -   Paid version (see<http://www.norsys.com/>for price information)
        -   Need to purchase API not GUI version ofNetica
        -   May want both (use GUI to visualize networks built in RNetica)
-   CPTtools, Peanut -- Artistic (Free and open source), does not depend on Netica
-   PNetica -- Artistic, but depends on RNetica.

## Installing the License Key

-   When you purchase a license, Norsys will send you a license key. Something that looks like:

    "+User/Organization/120,310-details/XXXXX"

    (Where I've obscured the last 5 security digits) 120 -- GUI, 310 -- API (I think)

Three ways of installing the license key:

1.  Use as argument to `NeticaSession(...,LicenseKey=XXX)`

2.  Set `options(NeticaLicenseKey=XXX)`

-   This can be set in `.Rprofile` in your home directory.

3.  Set an environmental variable `NeticaLicenseKey` before launching R.

-   This can be set in `.Renviron` in your home directory.

## Starting RNetica

After you load RNetica you need to start the session. This is when you pass the license key.

```{r Start with license}
#| eval: FALSE
library(RNetica)
sess <- NeticaSession(LicenseKey=NeticaLicenseKey)
startSession(sess)
```

```{r Start without license}
library(RNetica)
sess <- NeticaSession(LicenseKey="")
startSession(sess)
```

Everything in this tutorial should run without the license.

## When to use the session object.

-   When starting/restarting Netica
-   When creating a network, or reading one from a file.
-   When searching for networks.
-   Certain global properties

`NeticaBN` objects have a `$Session` property which points back to the session.

`NeticaNode` objects have a `$net` property which points back to the network (which points to the session).

## The R heap and the Netica heap

R and Netica have two different workspaces (memory heaps)

R workspace is saved and restored automatically when you quick and restart R.

Netica heap must be reconnected manually.

![R and Netica Heaps](img/NeticaR1.png)

## Active and Inactive pointers

When RNetica creates/finds a Netica object it creates a corresponding R object

If the R object is active then it points to the Netica object, and the Netica object points back at it.

If the pointer gets broken (saving and restarting R, deleting the network/node then the R object becomes inactive.

The function `is.active(nodeOrNet)` test to see if the node/net is active.

![R and Netica Heap](img/NeticaR1.png)

# Mini-ACED

## Mini-ACED Proficiency model

Subset of ACED network: Shute, Hansen & Almond (2008); <http://ecd.ralmond.net/ecdwiki/ACED>

[Download the mini-ACED file](miniACED.zip) Unzip it in `miniACED` and that this folder is in the same directory as this `qmd` file.

Next, change directory into the directory that contains `miniACED`

```{r cdMiniAced}
if ("miniACED-Geometric.csv" %in% list.files("miniACED")) {
  print("You're good to go.")
} else {
  stop("You need to unpack 'miniACED.zip' or go to the directory where it is.")
}
```

![Proficiency Model](img/miniACEDPnet.png)

## Mini-ACED EM Fragments

All ACED tasks were scored correct/incorrect

Each evidence model is represented by a fragment consisting of observables with *stub* edges indicating where it should be *adjoined* with the network.

![Common Ratio Easy](img/CommonRatioEasyEM.png)

![Model Table Extend Hard](img/ModelTableExtendHardEM.png)

# Scoring Script

## Preliminaries

## Task to EM map

Need a table to tell us which EM to use with which task

```{r EM mapping}
## Read in task->evidence model mapping
EMtable <- read.csv(file.path("miniACED","MiniACEDEMTable.csv"),
                    row.names=1,
                    as.is=2) #Keep EM names as strings
EMtable
```

```{r StartNetica}
## Scoring Script
## Preliminaries
#| eval=FALSE
library(RNetica)
sess <- NeticaSession()
startSession(sess)
```

## Read in the Network.

```{r read networks}
## Read in network -- Do this every time R is restarted
profModel <- ReadNetworks(file.path("miniACED","miniACEDPnet.dne"),session = sess)
## If profModels already exists could also use

## Reconnect nodes -- Do this every time R is restarted
allNodes <- NetworkAllNodes(profModel)
sgp <- allNodes$SolveGeometricProblems
sgp
```

## Aside 1 -- Node Sets

Node sets can be viewed as either

A. a set of labels assigned to each node.

B. a set of nodes which have a particular label.

In RNetica, these are very useful as they define collections of nodes that might be interesting in some way (e.g., Proficiency variables, Observable variable, background variables)

Node set operations yeild a list of nodes; iterating over that set is often very useful.

## Node Set Examples

```{r Node Sets}
## Node Sets
NetworkNodeSets(profModel)
NetworkNodesInSet(profModel,"pnodes")
```

## More Node Set Examples

```{r More Node Set Examples}
profNodes <- NetworkNodesInSet(profModel,"Proficiencies")
NodeSets(sgp)
```

Adding a node to a set.

```{r Setting node sets}
## These are all settable
NodeSets(sgp) <- c(NodeSets(sgp),"HighLevel")
NodeSets(sgp)
```

## Aside 2: Common Net operations

Just about everything that can be done through the Netica GUI, can be done through the Netica API, and hence through R Netica. \[In practice, the API version has lagged the GUI version, and my RNetica release lag Norsys's API updates.\] Many more examples are in the RNetica help.

```{r RNetica operations}
## Querying Nodes
NodeStates(sgp)   #List states
NodeParents(sgp)  #List parents
```

## More RNetica Queries

```{r More RNetica Operations}
NodeLevels(sgp)   #List numeric values associated with states
NodeProbs(sgp) # Conditional Probability Table (as array)
## These are all settable (can be used on RHS of <-) for model
## construction
```

## Conditional Probability Tables (as Data Frame)

```{r CPT}
sgp[] # Conditional Probability Table (as data frame)
```

Can use `[]` operator to select rows or elements

Can set table or (row or cell).

`CPTtools` package has tools for building tables.

```{r CPTtools, eval=FALSE}
help(package="CPTtools")
```

## Inference

Networks must be *compiled* before they are used for inference.

```{r Inference operations}
## Inference
CompileNetwork(profModel) #Lightning bolt on GUI 
## Must do this before inference
## Recompiling an already compiled network is harmless
```

```{r Values}
## Enter Evidence by setting values for these functions
NodeValue(sgp) #View or set the value
NodeLikelihood(sgp) #Virtual evidence
```

## Beliefs (Marginal Probabilities)

```{r Beliefs}
## Query beliefs
NodeBeliefs(sgp) #Current probability (given entered evidence)
NodeExpectedValue(sgp) #If node has values, EAP
## These aren't settable
```

```{r Retracting evidence}
## Retract Evidence
RetractNodeFinding(profNodes$ExamplesGeometric)
RetractNetFindings(profModel)
```

## Example: Enter Evidence

```{r Enter Evidence}
## Enter Evidence
NodeFinding(profNodes$CommonRatio) <- "Medium"
## Enter Evidence "Not Low" ("High or Medium")
NodeLikelihood(profNodes$ExamplesGeometric) <- c(1,1,0)

NodeBeliefs(sgp) #Current probability (given entered evidence)
NodeExpectedValue(sgp) #If node has values, EAP
```

## Example: Retract Evidence

```{r Retract Evidence}
## Retract Evidence
RetractNetFindings(profModel)
```

Many more examples:

```{r help RNetica, eval=FALSE}
help(RNetica)
```

## Back to work

Simple Scoring Example

*Start New Student* Copy the *proficiency model* to make *student model*.

```{r New Student}
Fred.SM <- CopyNetworks(profModel,"Fred")
Fred.SMvars <- NetworkAllNodes(Fred.SM)
CompileNetwork(Fred.SM)
```

## Setup score history.

```{r Setup history}
prior <- NodeBeliefs(Fred.SMvars$SolveGeometricProblems)
Fred.History <- matrix(prior,1,3)
row.names(Fred.History) <- "*Baseline*"
colnames(Fred.History) <- names(prior)
Fred.History
```

## Fred does a task

Task name and data.

```{r task data}
t.name <- "tCommonRatio1a"
t.isCorrect <- "Yes"
```

Adjoin SM and EM

```{r build motif}
EMnet <- ReadNetworks(file.path("miniACED",
                                paste(EMtable[t.name,"EM"],"dne",sep=".")),
                      session = sess)
obs <- AdjoinNetwork(Fred.SM,EMnet)
names(NetworkAllNodes(Fred.SM)) 
## Fred.SM is now the Motif for the current task.
CompileNetwork(Fred.SM)
```

## Absorb Evidence

Enter finding

```{r enter finding}
NodeFinding(obs$isCorrect) <- t.isCorrect
```

Calculate statistics of interest

```{r calculate statistics}
post <- NodeBeliefs(Fred.SMvars$SolveGeometricProblems)
Fred.History <- rbind(Fred.History,new=post)
rownames(Fred.History)[nrow(Fred.History)] <- paste(t.name,t.isCorrect,sep="=")
Fred.History
```

## Cleanup

Network and Observable no longer needed, so absorb it:

```{r Absorb evidence nodes}
DeleteNetwork(EMnet) ## Delete EM
#try(AbsorbNodes(obs))
## Currently, there is a Netica bug with Absorb Nodes, we will
## leave this node in place, as that is mostly harmless.
```

## 2nd Task

Write a script for scoring the second task.\
This time Fred attempts the task `tCommonRatio2a` and gets it incorrect.

```{r exercise, eval=FALSE}
### Fred does another task
t.name <- "tCommonRatio2a"
t.isCorrect <- "No"

## Load Evidence Model and adjoin

## Recompile

## Add Evidence

## Check Finding and add to history

## Clean up

```

## Answer for 2nd Task

```{r solution}
### Fred does another task
t.name <- "tCommonRatio2a"
t.isCorrect <- "No"

EMnet <- ReadNetworks(file.path("miniACED",
                                paste(EMtable[t.name,"EM"],"dne", sep=".")),
                      session=sess)
obs <- AdjoinNetwork(Fred.SM,EMnet)
#NodeVisPos(obs$isCorrect) <- EMtable[t.name,c("X","Y")]
## Fred.SM is now the Motif for the current task.
CompileNetwork(Fred.SM)

NodeFinding(obs[[1]]) <- t.isCorrect
post <- NodeBeliefs(Fred.SMvars$SolveGeometricProblems)
Fred.History <- rbind(Fred.History,new=post)
rownames(Fred.History)[nrow(Fred.History)] <- 
      paste(t.name,t.isCorrect,sep="=")
Fred.History

## Cleanup:  Delete EM and Absorb observables
DeleteNetwork(EMnet) ## Delete EM
#AbsorbNodes(obs)
```

## Fred does another task

```{r new data}
t.name <- "tCommonRatio2a"
t.isCorrect <- "No"
```

```{r new EM}
EMnet <- ReadNetworks(file.path("miniACED",
                paste(EMtable[t.name,"EM"],"dne",sep=".")),
                session=sess)
obs <- AdjoinNetwork(Fred.SM,EMnet)
(NetworkAllNodes(Fred.SM)) ## Fred.SM is now the Motif for the current task.
CompileNetwork(Fred.SM)
```

## Task 2 continued

```{r enter new finding}
NodeFinding(obs[[1]]) <- t.isCorrect
post <- NodeBeliefs(Fred.SMvars$SolveGeometricProblems)
Fred.History <- rbind(Fred.History,new=post)
rownames(Fred.History)[nrow(Fred.History)] <- paste(t.name,t.isCorrect,sep="=")
Fred.History
```

Cleanup: Delete EM and Absorb observables

```{r cleanup on task 2}
DeleteNetwork(EMnet) ## Delete EM
#try(AbsorbNodes(obs))
## Currently, there is a Netica bug with Absorb Nodes, we will leave
##this the node in place as that is mostly harmless.
```

## Fred logs out

Save network to a file.

```{r Save Fred}
WriteNetworks(Fred.SM,"FredSM.dne")
DeleteNetwork(Fred.SM)
is.active(Fred.SM)  ## No longer active in Netica space
```

Fred logs back in

```{r Restor Fred}
Fred.SM <- ReadNetworks("FredSM.dne",session=sess)
is.active(Fred.SM)
```

# Score an entire set of cases.

## Read in the scores.

```{r miniACED data}
miniACED.data <- read.csv(file.path("miniACED","miniACED-Geometric.csv"),row.names=1)
head(miniACED.data)
```

Some meta-data

```{r metadata}
## Mark columns of table corresponding to tasks
first.task <- 9
last.task <- 20 #ncol(miniACED.data)
## Code key for numeric values
t.vals <- c("No","Yes")

## Pick a student, we might normally iterate over this.
Student.row <- 1
```

## Setup for student in sample

Create Student Model from Proficiency Model

```{r setup student}
Student.SM <- CopyNetworks(profModel,"Student")
Student.SMvars <- NetworkAllNodes(Student.SM)
CompileNetwork(Student.SM)
```

Initialize history list

```{r setup history}
prior <- NodeBeliefs(Student.SMvars$SolveGeometricProblems)
Student.History <- matrix(prior,1,3)
row.names(Student.History) <- "*Baseline*"
colnames(Student.History) <- names(prior)
```

## Now loop over tasks

```{r Scoreit}
for (itask in first.task:last.task) {
  
  ## Look up the EM for the task, and adjoin it.
  tid <- names(miniACED.data)[itask]
  print(tid)
  EMnet <- ReadNetworks(file.path("miniACED",
                                  paste(EMtable[tid,"EM"],"dne",sep=".")),
                        session=sess)
  #print(sapply(NetworkAllNodes(EMnet),NodeVisPos))
  #browser()
  obs <- AdjoinNetwork(Student.SM,EMnet)
  CompileNetwork(Student.SM)

  ## Add the evidence
  t.val <- t.vals[miniACED.data[Student.row,itask]] #Decode integer
  NodeFinding(obs[[1]]) <- t.val
  
  ## Update the history
  post <- NodeBeliefs(Student.SMvars$SolveGeometricProblems)
  Student.History <- rbind(Student.History,new=post)
  rownames(Student.History)[nrow(Student.History)] <- paste(tid,t.val,sep="=")

  ## Cleanup, Delete EM and Absob Observables
  DeleteNetwork(EMnet)
  try(AbsorbNodes(obs)) # Still broken
}
```

## Now look at the scoring history.

```{r history}
Student.History
```

# Weight of Evidence

## Weight of Evidence

Good (1985)

*H* is binary hypothesis, e.g., *Proficiency* \> *Medium*

*E* is evidence for hypothesis

Weight of Evidence (WOE) is

$$ W(H:E) = \log \frac{P(E|H)}{P(E|\overline{H})} =
\log  \frac{P(H|E)}{P(\overline{H}|E)} -
\log  \frac{P(H)}{P(\overline{H})} $$

## Conditional Weight of Evidence

$$ W(H: E_2 | E_1) = \log  \frac{P(E_2|H,E_1)}{P(E_2|\overline{H},E_1)}
$$ Additive properties

$$ W(H: E_1, E2) = W(H: E_1) + W(H: E_2|E_1) $$

Order senstive (evidence seen earlier is worth more)

WOE Balance Sheet:

## Now examine scoring history

```{r woe balance sheet}
woeBal(Student.History,c("High","Medium"),"Low",
       title=paste("Evidence Balance Sheet for ",
                   rownames(miniACED.data)[Student.row]))
```
## Building a marginal graph.

```{r calcMargins}
CompileNetwork(Student.SM)
profs <- NetworkNodesInSet(Student.SM,"Proficiencies")
allBeliefs <- sapply(profs,function(n) rev(NodeBeliefs(n)))
allBeliefs
```
```{r stackedBars}
stackedBars(allBeliefs,2)
```


## For More information

```{r More Help, eval = FALSE}
help(RNetica)
help(package="RNetica")
help(CPTtools)
help(package="CPTtools")
```
